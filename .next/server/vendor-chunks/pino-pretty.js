"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pino-pretty";
exports.ids = ["vendor-chunks/pino-pretty"];
exports.modules = {

/***/ "(ssr)/../../node_modules/pino-pretty/index.js":
/*!***********************************************!*\
  !*** ../../node_modules/pino-pretty/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst chalk = __webpack_require__(/*! chalk */ \"(ssr)/../../node_modules/chalk/source/index.js\")\nconst jmespath = __webpack_require__(/*! jmespath */ \"(ssr)/../../node_modules/jmespath/jmespath.js\")\nconst colors = __webpack_require__(/*! ./lib/colors */ \"(ssr)/../../node_modules/pino-pretty/lib/colors.js\")\nconst { ERROR_LIKE_KEYS, MESSAGE_KEY, TIMESTAMP_KEY } = __webpack_require__(/*! ./lib/constants */ \"(ssr)/../../node_modules/pino-pretty/lib/constants.js\")\nconst {\n  isObject,\n  prettifyErrorLog,\n  prettifyLevel,\n  prettifyMessage,\n  prettifyMetadata,\n  prettifyObject,\n  prettifyTime,\n  filterLog\n} = __webpack_require__(/*! ./lib/utils */ \"(ssr)/../../node_modules/pino-pretty/lib/utils.js\")\n\nconst bourne = __webpack_require__(/*! @hapi/bourne */ \"(ssr)/../../node_modules/@hapi/bourne/lib/index.js\")\nconst jsonParser = input => {\n  try {\n    return { value: bourne.parse(input, { protoAction: 'remove' }) }\n  } catch (err) {\n    return { err }\n  }\n}\n\nconst defaultOptions = {\n  colorize: chalk.supportsColor,\n  crlf: false,\n  errorLikeObjectKeys: ERROR_LIKE_KEYS,\n  errorProps: '',\n  levelFirst: false,\n  messageKey: MESSAGE_KEY,\n  messageFormat: false,\n  timestampKey: TIMESTAMP_KEY,\n  translateTime: false,\n  useMetadata: false,\n  outputStream: process.stdout,\n  customPrettifiers: {},\n  hideObject: false,\n  singleLine: false\n}\n\nmodule.exports = function prettyFactory (options) {\n  const opts = Object.assign({}, defaultOptions, options)\n  const EOL = opts.crlf ? '\\r\\n' : '\\n'\n  const IDENT = '    '\n  const messageKey = opts.messageKey\n  const levelKey = opts.levelKey\n  const levelLabel = opts.levelLabel\n  const messageFormat = opts.messageFormat\n  const timestampKey = opts.timestampKey\n  const errorLikeObjectKeys = opts.errorLikeObjectKeys\n  const errorProps = opts.errorProps.split(',')\n  const customPrettifiers = opts.customPrettifiers\n  const ignoreKeys = opts.ignore ? new Set(opts.ignore.split(',')) : undefined\n  const hideObject = opts.hideObject\n  const singleLine = opts.singleLine\n\n  const colorizer = colors(opts.colorize)\n  const search = opts.search\n\n  return pretty\n\n  function pretty (inputData) {\n    let log\n    if (!isObject(inputData)) {\n      const parsed = jsonParser(inputData)\n      if (parsed.err || !isObject(parsed.value)) {\n        // pass through\n        return inputData + EOL\n      }\n      log = parsed.value\n    } else {\n      log = inputData\n    }\n\n    if (search && !jmespath.search(log, search)) {\n      return\n    }\n\n    const prettifiedMessage = prettifyMessage({ log, messageKey, colorizer, messageFormat, levelLabel })\n\n    if (ignoreKeys) {\n      log = filterLog(log, ignoreKeys)\n    }\n\n    const prettifiedLevel = prettifyLevel({ log, colorizer, levelKey })\n    const prettifiedMetadata = prettifyMetadata({ log })\n    const prettifiedTime = prettifyTime({ log, translateFormat: opts.translateTime, timestampKey })\n\n    let line = ''\n    if (opts.levelFirst && prettifiedLevel) {\n      line = `${prettifiedLevel}`\n    }\n\n    if (prettifiedTime && line === '') {\n      line = `${prettifiedTime}`\n    } else if (prettifiedTime) {\n      line = `${line} ${prettifiedTime}`\n    }\n\n    if (!opts.levelFirst && prettifiedLevel) {\n      if (line.length > 0) {\n        line = `${line} ${prettifiedLevel}`\n      } else {\n        line = prettifiedLevel\n      }\n    }\n\n    if (prettifiedMetadata) {\n      if (line.length > 0) {\n        line = `${line} ${prettifiedMetadata}:`\n      } else {\n        line = prettifiedMetadata\n      }\n    }\n\n    if (line.endsWith(':') === false && line !== '') {\n      line += ':'\n    }\n\n    if (prettifiedMessage) {\n      if (line.length > 0) {\n        line = `${line} ${prettifiedMessage}`\n      } else {\n        line = prettifiedMessage\n      }\n    }\n\n    if (line.length > 0 && !singleLine) {\n      line += EOL\n    }\n\n    if (log.type === 'Error' && log.stack) {\n      const prettifiedErrorLog = prettifyErrorLog({\n        log,\n        errorLikeKeys: errorLikeObjectKeys,\n        errorProperties: errorProps,\n        ident: IDENT,\n        eol: EOL\n      })\n      line += prettifiedErrorLog\n    } else if (!hideObject) {\n      const skipKeys = [messageKey, levelKey, timestampKey].filter(key => typeof log[key] === 'string' || typeof log[key] === 'number')\n      const prettifiedObject = prettifyObject({\n        input: log,\n        skipKeys,\n        customPrettifiers,\n        errorLikeKeys: errorLikeObjectKeys,\n        eol: EOL,\n        ident: IDENT,\n        singleLine,\n        colorizer\n      })\n\n      // In single line mode, include a space only if prettified version isn't empty\n      if (singleLine && !/^\\s$/.test(prettifiedObject)) {\n        line += ' '\n      }\n      line += prettifiedObject\n    }\n\n    return line\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3Bpbm8tcHJldHR5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGNBQWMsbUJBQU8sQ0FBQyw2REFBTztBQUM3QixpQkFBaUIsbUJBQU8sQ0FBQywrREFBVTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsd0VBQWM7QUFDckMsUUFBUSw4Q0FBOEMsRUFBRSxtQkFBTyxDQUFDLDhFQUFpQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxzRUFBYTs7QUFFekIsZUFBZSxtQkFBTyxDQUFDLHdFQUFjO0FBQ3JDO0FBQ0E7QUFDQSxhQUFhLDZCQUE2Qix1QkFBdUI7QUFDakUsSUFBSTtBQUNKLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0RBQWdELHVEQUF1RDs7QUFFdkc7QUFDQTtBQUNBOztBQUVBLDRDQUE0QywwQkFBMEI7QUFDdEUsa0RBQWtELEtBQUs7QUFDdkQsMENBQTBDLHdEQUF3RDs7QUFFbEc7QUFDQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7O0FBRUE7QUFDQSxnQkFBZ0IsZUFBZTtBQUMvQixNQUFNO0FBQ04sZ0JBQWdCLE1BQU0sRUFBRSxlQUFlO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsTUFBTSxFQUFFLGdCQUFnQjtBQUMxQyxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsTUFBTSxFQUFFLG1CQUFtQjtBQUM3QyxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLE1BQU0sRUFBRSxrQkFBa0I7QUFDNUMsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZWZpbGUvLi4vLi4vbm9kZV9tb2R1bGVzL3Bpbm8tcHJldHR5L2luZGV4LmpzP2QxYzgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxuY29uc3Qgam1lc3BhdGggPSByZXF1aXJlKCdqbWVzcGF0aCcpXG5jb25zdCBjb2xvcnMgPSByZXF1aXJlKCcuL2xpYi9jb2xvcnMnKVxuY29uc3QgeyBFUlJPUl9MSUtFX0tFWVMsIE1FU1NBR0VfS0VZLCBUSU1FU1RBTVBfS0VZIH0gPSByZXF1aXJlKCcuL2xpYi9jb25zdGFudHMnKVxuY29uc3Qge1xuICBpc09iamVjdCxcbiAgcHJldHRpZnlFcnJvckxvZyxcbiAgcHJldHRpZnlMZXZlbCxcbiAgcHJldHRpZnlNZXNzYWdlLFxuICBwcmV0dGlmeU1ldGFkYXRhLFxuICBwcmV0dGlmeU9iamVjdCxcbiAgcHJldHRpZnlUaW1lLFxuICBmaWx0ZXJMb2dcbn0gPSByZXF1aXJlKCcuL2xpYi91dGlscycpXG5cbmNvbnN0IGJvdXJuZSA9IHJlcXVpcmUoJ0BoYXBpL2JvdXJuZScpXG5jb25zdCBqc29uUGFyc2VyID0gaW5wdXQgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB7IHZhbHVlOiBib3VybmUucGFyc2UoaW5wdXQsIHsgcHJvdG9BY3Rpb246ICdyZW1vdmUnIH0pIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHsgZXJyIH1cbiAgfVxufVxuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgY29sb3JpemU6IGNoYWxrLnN1cHBvcnRzQ29sb3IsXG4gIGNybGY6IGZhbHNlLFxuICBlcnJvckxpa2VPYmplY3RLZXlzOiBFUlJPUl9MSUtFX0tFWVMsXG4gIGVycm9yUHJvcHM6ICcnLFxuICBsZXZlbEZpcnN0OiBmYWxzZSxcbiAgbWVzc2FnZUtleTogTUVTU0FHRV9LRVksXG4gIG1lc3NhZ2VGb3JtYXQ6IGZhbHNlLFxuICB0aW1lc3RhbXBLZXk6IFRJTUVTVEFNUF9LRVksXG4gIHRyYW5zbGF0ZVRpbWU6IGZhbHNlLFxuICB1c2VNZXRhZGF0YTogZmFsc2UsXG4gIG91dHB1dFN0cmVhbTogcHJvY2Vzcy5zdGRvdXQsXG4gIGN1c3RvbVByZXR0aWZpZXJzOiB7fSxcbiAgaGlkZU9iamVjdDogZmFsc2UsXG4gIHNpbmdsZUxpbmU6IGZhbHNlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJldHR5RmFjdG9yeSAob3B0aW9ucykge1xuICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpXG4gIGNvbnN0IEVPTCA9IG9wdHMuY3JsZiA/ICdcXHJcXG4nIDogJ1xcbidcbiAgY29uc3QgSURFTlQgPSAnICAgICdcbiAgY29uc3QgbWVzc2FnZUtleSA9IG9wdHMubWVzc2FnZUtleVxuICBjb25zdCBsZXZlbEtleSA9IG9wdHMubGV2ZWxLZXlcbiAgY29uc3QgbGV2ZWxMYWJlbCA9IG9wdHMubGV2ZWxMYWJlbFxuICBjb25zdCBtZXNzYWdlRm9ybWF0ID0gb3B0cy5tZXNzYWdlRm9ybWF0XG4gIGNvbnN0IHRpbWVzdGFtcEtleSA9IG9wdHMudGltZXN0YW1wS2V5XG4gIGNvbnN0IGVycm9yTGlrZU9iamVjdEtleXMgPSBvcHRzLmVycm9yTGlrZU9iamVjdEtleXNcbiAgY29uc3QgZXJyb3JQcm9wcyA9IG9wdHMuZXJyb3JQcm9wcy5zcGxpdCgnLCcpXG4gIGNvbnN0IGN1c3RvbVByZXR0aWZpZXJzID0gb3B0cy5jdXN0b21QcmV0dGlmaWVyc1xuICBjb25zdCBpZ25vcmVLZXlzID0gb3B0cy5pZ25vcmUgPyBuZXcgU2V0KG9wdHMuaWdub3JlLnNwbGl0KCcsJykpIDogdW5kZWZpbmVkXG4gIGNvbnN0IGhpZGVPYmplY3QgPSBvcHRzLmhpZGVPYmplY3RcbiAgY29uc3Qgc2luZ2xlTGluZSA9IG9wdHMuc2luZ2xlTGluZVxuXG4gIGNvbnN0IGNvbG9yaXplciA9IGNvbG9ycyhvcHRzLmNvbG9yaXplKVxuICBjb25zdCBzZWFyY2ggPSBvcHRzLnNlYXJjaFxuXG4gIHJldHVybiBwcmV0dHlcblxuICBmdW5jdGlvbiBwcmV0dHkgKGlucHV0RGF0YSkge1xuICAgIGxldCBsb2dcbiAgICBpZiAoIWlzT2JqZWN0KGlucHV0RGF0YSkpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IGpzb25QYXJzZXIoaW5wdXREYXRhKVxuICAgICAgaWYgKHBhcnNlZC5lcnIgfHwgIWlzT2JqZWN0KHBhcnNlZC52YWx1ZSkpIHtcbiAgICAgICAgLy8gcGFzcyB0aHJvdWdoXG4gICAgICAgIHJldHVybiBpbnB1dERhdGEgKyBFT0xcbiAgICAgIH1cbiAgICAgIGxvZyA9IHBhcnNlZC52YWx1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2cgPSBpbnB1dERhdGFcbiAgICB9XG5cbiAgICBpZiAoc2VhcmNoICYmICFqbWVzcGF0aC5zZWFyY2gobG9nLCBzZWFyY2gpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBwcmV0dGlmaWVkTWVzc2FnZSA9IHByZXR0aWZ5TWVzc2FnZSh7IGxvZywgbWVzc2FnZUtleSwgY29sb3JpemVyLCBtZXNzYWdlRm9ybWF0LCBsZXZlbExhYmVsIH0pXG5cbiAgICBpZiAoaWdub3JlS2V5cykge1xuICAgICAgbG9nID0gZmlsdGVyTG9nKGxvZywgaWdub3JlS2V5cylcbiAgICB9XG5cbiAgICBjb25zdCBwcmV0dGlmaWVkTGV2ZWwgPSBwcmV0dGlmeUxldmVsKHsgbG9nLCBjb2xvcml6ZXIsIGxldmVsS2V5IH0pXG4gICAgY29uc3QgcHJldHRpZmllZE1ldGFkYXRhID0gcHJldHRpZnlNZXRhZGF0YSh7IGxvZyB9KVxuICAgIGNvbnN0IHByZXR0aWZpZWRUaW1lID0gcHJldHRpZnlUaW1lKHsgbG9nLCB0cmFuc2xhdGVGb3JtYXQ6IG9wdHMudHJhbnNsYXRlVGltZSwgdGltZXN0YW1wS2V5IH0pXG5cbiAgICBsZXQgbGluZSA9ICcnXG4gICAgaWYgKG9wdHMubGV2ZWxGaXJzdCAmJiBwcmV0dGlmaWVkTGV2ZWwpIHtcbiAgICAgIGxpbmUgPSBgJHtwcmV0dGlmaWVkTGV2ZWx9YFxuICAgIH1cblxuICAgIGlmIChwcmV0dGlmaWVkVGltZSAmJiBsaW5lID09PSAnJykge1xuICAgICAgbGluZSA9IGAke3ByZXR0aWZpZWRUaW1lfWBcbiAgICB9IGVsc2UgaWYgKHByZXR0aWZpZWRUaW1lKSB7XG4gICAgICBsaW5lID0gYCR7bGluZX0gJHtwcmV0dGlmaWVkVGltZX1gXG4gICAgfVxuXG4gICAgaWYgKCFvcHRzLmxldmVsRmlyc3QgJiYgcHJldHRpZmllZExldmVsKSB7XG4gICAgICBpZiAobGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxpbmUgPSBgJHtsaW5lfSAke3ByZXR0aWZpZWRMZXZlbH1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lID0gcHJldHRpZmllZExldmVsXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXR0aWZpZWRNZXRhZGF0YSkge1xuICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICBsaW5lID0gYCR7bGluZX0gJHtwcmV0dGlmaWVkTWV0YWRhdGF9OmBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmUgPSBwcmV0dGlmaWVkTWV0YWRhdGFcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGluZS5lbmRzV2l0aCgnOicpID09PSBmYWxzZSAmJiBsaW5lICE9PSAnJykge1xuICAgICAgbGluZSArPSAnOidcbiAgICB9XG5cbiAgICBpZiAocHJldHRpZmllZE1lc3NhZ2UpIHtcbiAgICAgIGlmIChsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGluZSA9IGAke2xpbmV9ICR7cHJldHRpZmllZE1lc3NhZ2V9YFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZSA9IHByZXR0aWZpZWRNZXNzYWdlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxpbmUubGVuZ3RoID4gMCAmJiAhc2luZ2xlTGluZSkge1xuICAgICAgbGluZSArPSBFT0xcbiAgICB9XG5cbiAgICBpZiAobG9nLnR5cGUgPT09ICdFcnJvcicgJiYgbG9nLnN0YWNrKSB7XG4gICAgICBjb25zdCBwcmV0dGlmaWVkRXJyb3JMb2cgPSBwcmV0dGlmeUVycm9yTG9nKHtcbiAgICAgICAgbG9nLFxuICAgICAgICBlcnJvckxpa2VLZXlzOiBlcnJvckxpa2VPYmplY3RLZXlzLFxuICAgICAgICBlcnJvclByb3BlcnRpZXM6IGVycm9yUHJvcHMsXG4gICAgICAgIGlkZW50OiBJREVOVCxcbiAgICAgICAgZW9sOiBFT0xcbiAgICAgIH0pXG4gICAgICBsaW5lICs9IHByZXR0aWZpZWRFcnJvckxvZ1xuICAgIH0gZWxzZSBpZiAoIWhpZGVPYmplY3QpIHtcbiAgICAgIGNvbnN0IHNraXBLZXlzID0gW21lc3NhZ2VLZXksIGxldmVsS2V5LCB0aW1lc3RhbXBLZXldLmZpbHRlcihrZXkgPT4gdHlwZW9mIGxvZ1trZXldID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbG9nW2tleV0gPT09ICdudW1iZXInKVxuICAgICAgY29uc3QgcHJldHRpZmllZE9iamVjdCA9IHByZXR0aWZ5T2JqZWN0KHtcbiAgICAgICAgaW5wdXQ6IGxvZyxcbiAgICAgICAgc2tpcEtleXMsXG4gICAgICAgIGN1c3RvbVByZXR0aWZpZXJzLFxuICAgICAgICBlcnJvckxpa2VLZXlzOiBlcnJvckxpa2VPYmplY3RLZXlzLFxuICAgICAgICBlb2w6IEVPTCxcbiAgICAgICAgaWRlbnQ6IElERU5ULFxuICAgICAgICBzaW5nbGVMaW5lLFxuICAgICAgICBjb2xvcml6ZXJcbiAgICAgIH0pXG5cbiAgICAgIC8vIEluIHNpbmdsZSBsaW5lIG1vZGUsIGluY2x1ZGUgYSBzcGFjZSBvbmx5IGlmIHByZXR0aWZpZWQgdmVyc2lvbiBpc24ndCBlbXB0eVxuICAgICAgaWYgKHNpbmdsZUxpbmUgJiYgIS9eXFxzJC8udGVzdChwcmV0dGlmaWVkT2JqZWN0KSkge1xuICAgICAgICBsaW5lICs9ICcgJ1xuICAgICAgfVxuICAgICAgbGluZSArPSBwcmV0dGlmaWVkT2JqZWN0XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmVcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pino-pretty/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pino-pretty/lib/colors.js":
/*!****************************************************!*\
  !*** ../../node_modules/pino-pretty/lib/colors.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { LEVELS, LEVEL_NAMES } = __webpack_require__(/*! ./constants */ \"(ssr)/../../node_modules/pino-pretty/lib/constants.js\")\n\nconst nocolor = input => input\nconst plain = {\n  default: nocolor,\n  60: nocolor,\n  50: nocolor,\n  40: nocolor,\n  30: nocolor,\n  20: nocolor,\n  10: nocolor,\n  message: nocolor,\n  greyMessage: nocolor\n}\n\nconst chalk = __webpack_require__(/*! chalk */ \"(ssr)/../../node_modules/chalk/source/index.js\")\nconst ctx = new chalk.Instance({ level: 3 })\nconst colored = {\n  default: ctx.white,\n  60: ctx.bgRed,\n  50: ctx.red,\n  40: ctx.yellow,\n  30: ctx.green,\n  20: ctx.blue,\n  10: ctx.grey,\n  message: ctx.cyan,\n  greyMessage: ctx.grey\n}\n\nfunction colorizeLevel (level, colorizer) {\n  if (Number.isInteger(+level)) {\n    return Object.prototype.hasOwnProperty.call(LEVELS, level)\n      ? colorizer[level](LEVELS[level])\n      : colorizer.default(LEVELS.default)\n  }\n  const levelNum = LEVEL_NAMES[level.toLowerCase()] || 'default'\n  return colorizer[levelNum](LEVELS[levelNum])\n}\n\nfunction plainColorizer (level) {\n  return colorizeLevel(level, plain)\n}\nplainColorizer.message = plain.message\nplainColorizer.greyMessage = plain.greyMessage\n\nfunction coloredColorizer (level) {\n  return colorizeLevel(level, colored)\n}\ncoloredColorizer.message = colored.message\ncoloredColorizer.greyMessage = colored.greyMessage\n\n/**\n * Factory function get a function to colorized levels. The returned function\n * also includes a `.message(str)` method to colorize strings.\n *\n * @param {boolean} [useColors=false] When `true` a function that applies standard\n * terminal colors is returned.\n *\n * @returns {function} `function (level) {}` has a `.message(str)` method to\n * apply colorization to a string. The core function accepts either an integer\n * `level` or a `string` level. The integer level will map to a known level\n * string or to `USERLVL` if not known.  The string `level` will map to the same\n * colors as the integer `level` and will also default to `USERLVL` if the given\n * string is not a recognized level name.\n */\nmodule.exports = function getColorizer (useColors = false) {\n  return useColors ? coloredColorizer : plainColorizer\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3Bpbm8tcHJldHR5L2xpYi9jb2xvcnMuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosUUFBUSxzQkFBc0IsRUFBRSxtQkFBTyxDQUFDLDBFQUFhOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxtQkFBTyxDQUFDLDZEQUFPO0FBQzdCLGlDQUFpQyxVQUFVO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0EsYUFBYSxVQUFVLG9CQUFvQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZWZpbGUvLi4vLi4vbm9kZV9tb2R1bGVzL3Bpbm8tcHJldHR5L2xpYi9jb2xvcnMuanM/NGFiYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBMRVZFTFMsIExFVkVMX05BTUVTIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpXG5cbmNvbnN0IG5vY29sb3IgPSBpbnB1dCA9PiBpbnB1dFxuY29uc3QgcGxhaW4gPSB7XG4gIGRlZmF1bHQ6IG5vY29sb3IsXG4gIDYwOiBub2NvbG9yLFxuICA1MDogbm9jb2xvcixcbiAgNDA6IG5vY29sb3IsXG4gIDMwOiBub2NvbG9yLFxuICAyMDogbm9jb2xvcixcbiAgMTA6IG5vY29sb3IsXG4gIG1lc3NhZ2U6IG5vY29sb3IsXG4gIGdyZXlNZXNzYWdlOiBub2NvbG9yXG59XG5cbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxuY29uc3QgY3R4ID0gbmV3IGNoYWxrLkluc3RhbmNlKHsgbGV2ZWw6IDMgfSlcbmNvbnN0IGNvbG9yZWQgPSB7XG4gIGRlZmF1bHQ6IGN0eC53aGl0ZSxcbiAgNjA6IGN0eC5iZ1JlZCxcbiAgNTA6IGN0eC5yZWQsXG4gIDQwOiBjdHgueWVsbG93LFxuICAzMDogY3R4LmdyZWVuLFxuICAyMDogY3R4LmJsdWUsXG4gIDEwOiBjdHguZ3JleSxcbiAgbWVzc2FnZTogY3R4LmN5YW4sXG4gIGdyZXlNZXNzYWdlOiBjdHguZ3JleVxufVxuXG5mdW5jdGlvbiBjb2xvcml6ZUxldmVsIChsZXZlbCwgY29sb3JpemVyKSB7XG4gIGlmIChOdW1iZXIuaXNJbnRlZ2VyKCtsZXZlbCkpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKExFVkVMUywgbGV2ZWwpXG4gICAgICA/IGNvbG9yaXplcltsZXZlbF0oTEVWRUxTW2xldmVsXSlcbiAgICAgIDogY29sb3JpemVyLmRlZmF1bHQoTEVWRUxTLmRlZmF1bHQpXG4gIH1cbiAgY29uc3QgbGV2ZWxOdW0gPSBMRVZFTF9OQU1FU1tsZXZlbC50b0xvd2VyQ2FzZSgpXSB8fCAnZGVmYXVsdCdcbiAgcmV0dXJuIGNvbG9yaXplcltsZXZlbE51bV0oTEVWRUxTW2xldmVsTnVtXSlcbn1cblxuZnVuY3Rpb24gcGxhaW5Db2xvcml6ZXIgKGxldmVsKSB7XG4gIHJldHVybiBjb2xvcml6ZUxldmVsKGxldmVsLCBwbGFpbilcbn1cbnBsYWluQ29sb3JpemVyLm1lc3NhZ2UgPSBwbGFpbi5tZXNzYWdlXG5wbGFpbkNvbG9yaXplci5ncmV5TWVzc2FnZSA9IHBsYWluLmdyZXlNZXNzYWdlXG5cbmZ1bmN0aW9uIGNvbG9yZWRDb2xvcml6ZXIgKGxldmVsKSB7XG4gIHJldHVybiBjb2xvcml6ZUxldmVsKGxldmVsLCBjb2xvcmVkKVxufVxuY29sb3JlZENvbG9yaXplci5tZXNzYWdlID0gY29sb3JlZC5tZXNzYWdlXG5jb2xvcmVkQ29sb3JpemVyLmdyZXlNZXNzYWdlID0gY29sb3JlZC5ncmV5TWVzc2FnZVxuXG4vKipcbiAqIEZhY3RvcnkgZnVuY3Rpb24gZ2V0IGEgZnVuY3Rpb24gdG8gY29sb3JpemVkIGxldmVscy4gVGhlIHJldHVybmVkIGZ1bmN0aW9uXG4gKiBhbHNvIGluY2x1ZGVzIGEgYC5tZXNzYWdlKHN0cilgIG1ldGhvZCB0byBjb2xvcml6ZSBzdHJpbmdzLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VzZUNvbG9ycz1mYWxzZV0gV2hlbiBgdHJ1ZWAgYSBmdW5jdGlvbiB0aGF0IGFwcGxpZXMgc3RhbmRhcmRcbiAqIHRlcm1pbmFsIGNvbG9ycyBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IGBmdW5jdGlvbiAobGV2ZWwpIHt9YCBoYXMgYSBgLm1lc3NhZ2Uoc3RyKWAgbWV0aG9kIHRvXG4gKiBhcHBseSBjb2xvcml6YXRpb24gdG8gYSBzdHJpbmcuIFRoZSBjb3JlIGZ1bmN0aW9uIGFjY2VwdHMgZWl0aGVyIGFuIGludGVnZXJcbiAqIGBsZXZlbGAgb3IgYSBgc3RyaW5nYCBsZXZlbC4gVGhlIGludGVnZXIgbGV2ZWwgd2lsbCBtYXAgdG8gYSBrbm93biBsZXZlbFxuICogc3RyaW5nIG9yIHRvIGBVU0VSTFZMYCBpZiBub3Qga25vd24uICBUaGUgc3RyaW5nIGBsZXZlbGAgd2lsbCBtYXAgdG8gdGhlIHNhbWVcbiAqIGNvbG9ycyBhcyB0aGUgaW50ZWdlciBgbGV2ZWxgIGFuZCB3aWxsIGFsc28gZGVmYXVsdCB0byBgVVNFUkxWTGAgaWYgdGhlIGdpdmVuXG4gKiBzdHJpbmcgaXMgbm90IGEgcmVjb2duaXplZCBsZXZlbCBuYW1lLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldENvbG9yaXplciAodXNlQ29sb3JzID0gZmFsc2UpIHtcbiAgcmV0dXJuIHVzZUNvbG9ycyA/IGNvbG9yZWRDb2xvcml6ZXIgOiBwbGFpbkNvbG9yaXplclxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pino-pretty/lib/colors.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pino-pretty/lib/constants.js":
/*!*******************************************************!*\
  !*** ../../node_modules/pino-pretty/lib/constants.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = {\n  DATE_FORMAT: 'yyyy-mm-dd HH:MM:ss.l o',\n\n  ERROR_LIKE_KEYS: ['err', 'error'],\n\n  MESSAGE_KEY: 'msg',\n\n  LEVEL_KEY: 'level',\n\n  LEVEL_LABEL: 'levelLabel',\n\n  TIMESTAMP_KEY: 'time',\n\n  LEVELS: {\n    default: 'USERLVL',\n    60: 'FATAL',\n    50: 'ERROR',\n    40: 'WARN',\n    30: 'INFO',\n    20: 'DEBUG',\n    10: 'TRACE'\n  },\n\n  LEVEL_NAMES: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n\n  // Object keys that probably came from a logger like Pino or Bunyan.\n  LOGGER_KEYS: [\n    'pid',\n    'hostname',\n    'name',\n    'level',\n    'time',\n    'timestamp',\n    'caller'\n  ]\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3Bpbm8tcHJldHR5L2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RlZmlsZS8uLi8uLi9ub2RlX21vZHVsZXMvcGluby1wcmV0dHkvbGliL2NvbnN0YW50cy5qcz9jZjc3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgREFURV9GT1JNQVQ6ICd5eXl5LW1tLWRkIEhIOk1NOnNzLmwgbycsXG5cbiAgRVJST1JfTElLRV9LRVlTOiBbJ2VycicsICdlcnJvciddLFxuXG4gIE1FU1NBR0VfS0VZOiAnbXNnJyxcblxuICBMRVZFTF9LRVk6ICdsZXZlbCcsXG5cbiAgTEVWRUxfTEFCRUw6ICdsZXZlbExhYmVsJyxcblxuICBUSU1FU1RBTVBfS0VZOiAndGltZScsXG5cbiAgTEVWRUxTOiB7XG4gICAgZGVmYXVsdDogJ1VTRVJMVkwnLFxuICAgIDYwOiAnRkFUQUwnLFxuICAgIDUwOiAnRVJST1InLFxuICAgIDQwOiAnV0FSTicsXG4gICAgMzA6ICdJTkZPJyxcbiAgICAyMDogJ0RFQlVHJyxcbiAgICAxMDogJ1RSQUNFJ1xuICB9LFxuXG4gIExFVkVMX05BTUVTOiB7XG4gICAgZmF0YWw6IDYwLFxuICAgIGVycm9yOiA1MCxcbiAgICB3YXJuOiA0MCxcbiAgICBpbmZvOiAzMCxcbiAgICBkZWJ1ZzogMjAsXG4gICAgdHJhY2U6IDEwXG4gIH0sXG5cbiAgLy8gT2JqZWN0IGtleXMgdGhhdCBwcm9iYWJseSBjYW1lIGZyb20gYSBsb2dnZXIgbGlrZSBQaW5vIG9yIEJ1bnlhbi5cbiAgTE9HR0VSX0tFWVM6IFtcbiAgICAncGlkJyxcbiAgICAnaG9zdG5hbWUnLFxuICAgICduYW1lJyxcbiAgICAnbGV2ZWwnLFxuICAgICd0aW1lJyxcbiAgICAndGltZXN0YW1wJyxcbiAgICAnY2FsbGVyJ1xuICBdXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pino-pretty/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pino-pretty/lib/utils.js":
/*!***************************************************!*\
  !*** ../../node_modules/pino-pretty/lib/utils.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst clone = __webpack_require__(/*! rfdc */ \"(ssr)/../../node_modules/rfdc/index.js\")()\nconst dateformat = __webpack_require__(/*! dateformat */ \"(ssr)/../../node_modules/dateformat/lib/dateformat.js\")\nconst stringifySafe = __webpack_require__(/*! fast-safe-stringify */ \"(ssr)/../../node_modules/fast-safe-stringify/index.js\")\nconst defaultColorizer = __webpack_require__(/*! ./colors */ \"(ssr)/../../node_modules/pino-pretty/lib/colors.js\")()\nconst {\n  DATE_FORMAT,\n  ERROR_LIKE_KEYS,\n  MESSAGE_KEY,\n  LEVEL_KEY,\n  LEVEL_LABEL,\n  TIMESTAMP_KEY,\n  LOGGER_KEYS,\n  LEVELS\n} = __webpack_require__(/*! ./constants */ \"(ssr)/../../node_modules/pino-pretty/lib/constants.js\")\n\nmodule.exports = {\n  isObject,\n  prettifyErrorLog,\n  prettifyLevel,\n  prettifyMessage,\n  prettifyMetadata,\n  prettifyObject,\n  prettifyTime,\n  filterLog\n}\n\nmodule.exports.internals = {\n  formatTime,\n  joinLinesWithIndentation,\n  prettifyError,\n  deleteLogProperty\n}\n\n/**\n * Converts a given `epoch` to a desired display format.\n *\n * @param {number|string} epoch The time to convert. May be any value that is\n * valid for `new Date()`.\n * @param {boolean|string} [translateTime=false] When `false`, the given `epoch`\n * will simply be returned. When `true`, the given `epoch` will be converted\n * to a string at UTC using the `DATE_FORMAT` constant. If `translateTime` is\n * a string, the following rules are available:\n *\n * - `<format string>`: The string is a literal format string. This format\n * string will be used to interpret the `epoch` and return a display string\n * at UTC.\n * - `SYS:STANDARD`: The returned display string will follow the `DATE_FORMAT`\n * constant at the system's local timezone.\n * - `SYS:<format string>`: The returned display string will follow the given\n * `<format string>` at the system's local timezone.\n * - `UTC:<format string>`: The returned display string will follow the given\n * `<format string>` at UTC.\n *\n * @returns {number|string} The formatted time.\n */\nfunction formatTime (epoch, translateTime = false) {\n  if (translateTime === false) {\n    return epoch\n  }\n\n  const instant = new Date(epoch)\n  if (translateTime === true) {\n    return dateformat(instant, 'UTC:' + DATE_FORMAT)\n  }\n\n  const upperFormat = translateTime.toUpperCase()\n  if (upperFormat === 'SYS:STANDARD') {\n    return dateformat(instant, DATE_FORMAT)\n  }\n\n  const prefix = upperFormat.substr(0, 4)\n  if (prefix === 'SYS:' || prefix === 'UTC:') {\n    if (prefix === 'UTC:') {\n      return dateformat(instant, translateTime)\n    }\n    return dateformat(instant, translateTime.slice(4))\n  }\n\n  return dateformat(instant, `UTC:${translateTime}`)\n}\n\nfunction isObject (input) {\n  return Object.prototype.toString.apply(input) === '[object Object]'\n}\n\n/**\n * Given a string with line separators, either `\\r\\n` or `\\n`, add indentation\n * to all lines subsequent to the first line and rejoin the lines using an\n * end of line sequence.\n *\n * @param {object} input\n * @param {string} input.input The string to split and reformat.\n * @param {string} [input.ident] The indentation string. Default: `    ` (4 spaces).\n * @param {string} [input.eol] The end of line sequence to use when rejoining\n * the lines. Default: `'\\n'`.\n *\n * @returns {string} A string with lines subsequent to the first indented\n * with the given indentation sequence.\n */\nfunction joinLinesWithIndentation ({ input, ident = '    ', eol = '\\n' }) {\n  const lines = input.split(/\\r?\\n/)\n  for (let i = 1; i < lines.length; i += 1) {\n    lines[i] = ident + lines[i]\n  }\n  return lines.join(eol)\n}\n\n/**\n * Given a log object that has a `type: 'Error'` key, prettify the object and\n * return the result. In other\n *\n * @param {object} input\n * @param {object} input.log The error log to prettify.\n * @param {string} [input.messageKey] The name of the key that contains a\n * general log message. This is not the error's message property but the logger\n * messsage property. Default: `MESSAGE_KEY` constant.\n * @param {string} [input.ident] The sequence to use for indentation. Default: `'    '`.\n * @param {string} [input.eol] The sequence to use for EOL. Default: `'\\n'`.\n * @param {string[]} [input.errorLikeKeys] A set of keys that should be considered\n * to have error objects as values. Default: `ERROR_LIKE_KEYS` constant.\n * @param {string[]} [input.errorProperties] A set of specific error object\n * properties, that are not the value of `messageKey`, `type`, or `stack`, to\n * include in the prettified result. The first entry in the list may be `'*'`\n * to indicate that all sibiling properties should be prettified. Default: `[]`.\n *\n * @returns {string} A sring that represents the prettified error log.\n */\nfunction prettifyErrorLog ({\n  log,\n  messageKey = MESSAGE_KEY,\n  ident = '    ',\n  eol = '\\n',\n  errorLikeKeys = ERROR_LIKE_KEYS,\n  errorProperties = []\n}) {\n  const stack = log.stack\n  const joinedLines = joinLinesWithIndentation({ input: stack, ident, eol })\n  let result = `${ident}${joinedLines}${eol}`\n\n  if (errorProperties.length > 0) {\n    const excludeProperties = LOGGER_KEYS.concat(messageKey, 'type', 'stack')\n    let propertiesToPrint\n    if (errorProperties[0] === '*') {\n      // Print all sibling properties except for the standard exclusions.\n      propertiesToPrint = Object.keys(log).filter(k => excludeProperties.includes(k) === false)\n    } else {\n      // Print only sepcified properties unless the property is a standard exclusion.\n      propertiesToPrint = errorProperties.filter(k => excludeProperties.includes(k) === false)\n    }\n\n    for (let i = 0; i < propertiesToPrint.length; i += 1) {\n      const key = propertiesToPrint[i]\n      if (key in log === false) continue\n      if (isObject(log[key])) {\n        // The nested object may have \"logger\" type keys but since they are not\n        // at the root level of the object being processed, we want to print them.\n        // Thus, we invoke with `excludeLoggerKeys: false`.\n        const prettifiedObject = prettifyObject({ input: log[key], errorLikeKeys, excludeLoggerKeys: false, eol, ident })\n        result = `${result}${key}: {${eol}${prettifiedObject}}${eol}`\n        continue\n      }\n      result = `${result}${key}: ${log[key]}${eol}`\n    }\n  }\n\n  return result\n}\n\n/**\n * Checks if the passed in log has a `level` value and returns a prettified\n * string for that level if so.\n *\n * @param {object} input\n * @param {object} input.log The log object.\n * @param {function} [input.colorizer] A colorizer function that accepts a level\n * value and returns a colorized string. Default: a no-op colorizer.\n * @param {string} [levelKey='level'] The key to find the level under.\n *\n * @returns {undefined|string} If `log` does not have a `level` property then\n * `undefined` will be returned. Otherwise, a string from the specified\n * `colorizer` is returned.\n */\nfunction prettifyLevel ({ log, colorizer = defaultColorizer, levelKey = LEVEL_KEY }) {\n  if (levelKey in log === false) return undefined\n  return colorizer(log[levelKey])\n}\n\n/**\n * Prettifies a message string if the given `log` has a message property.\n *\n * @param {object} input\n * @param {object} input.log The log object with the message to colorize.\n * @param {string} [input.messageKey='msg'] The property of the `log` that is the\n * message to be prettified.\n * @param {string|function} [input.messageFormat=undefined] A format string or function that defines how the\n *  logged message should be formatted, e.g. `'{level} - {pid}'`.\n * @param {function} [input.colorizer] A colorizer function that has a\n * `.message(str)` method attached to it. This function should return a colorized\n * string which will be the \"prettified\" message. Default: a no-op colorizer.\n *\n * @returns {undefined|string} If the message key is not found, or the message\n * key is not a string, then `undefined` will be returned. Otherwise, a string\n * that is the prettified message.\n */\nfunction prettifyMessage ({ log, messageFormat, messageKey = MESSAGE_KEY, colorizer = defaultColorizer, levelLabel = LEVEL_LABEL }) {\n  if (messageFormat && typeof messageFormat === 'string') {\n    const message = String(messageFormat).replace(/{([^{}]+)}/g, function (match, p1) {\n      // return log level as string instead of int\n      if (p1 === levelLabel && log[LEVEL_KEY]) {\n        return LEVELS[log[LEVEL_KEY]]\n      }\n      // Parse nested key access, e.g. `{keyA.subKeyB}`.\n      return p1.split('.').reduce(function (prev, curr) {\n        if (prev && prev[curr]) {\n          return prev[curr]\n        }\n        return ''\n      }, log)\n    })\n    return colorizer.message(message)\n  }\n  if (messageFormat && typeof messageFormat === 'function') {\n    const msg = messageFormat(log, messageKey, levelLabel)\n    return colorizer.message(msg)\n  }\n  if (messageKey in log === false) return undefined\n  if (typeof log[messageKey] !== 'string') return undefined\n  return colorizer.message(log[messageKey])\n}\n\n/**\n * Prettifies metadata that is usually present in a Pino log line. It looks for\n * fields `name`, `pid`, `hostname`, and `caller` and returns a formatted string using\n * the fields it finds.\n *\n * @param {object} input\n * @param {object} input.log The log that may or may not contain metadata to\n * be prettified.\n *\n * @returns {undefined|string} If no metadata is found then `undefined` is\n * returned. Otherwise, a string of prettified metadata is returned.\n */\nfunction prettifyMetadata ({ log }) {\n  let line = ''\n\n  if (log.name || log.pid || log.hostname) {\n    line += '('\n\n    if (log.name) {\n      line += log.name\n    }\n\n    if (log.name && log.pid) {\n      line += '/' + log.pid\n    } else if (log.pid) {\n      line += log.pid\n    }\n\n    if (log.hostname) {\n      // If `pid` and `name` were in the ignore keys list then we don't need\n      // the leading space.\n      line += `${line === '(' ? 'on' : ' on'} ${log.hostname}`\n    }\n\n    line += ')'\n  }\n\n  if (log.caller) {\n    line += `${line === '' ? '' : ' '}<${log.caller}>`\n  }\n\n  if (line === '') {\n    return undefined\n  } else {\n    return line\n  }\n}\n\n/**\n * Prettifies a standard object. Special care is taken when processing the object\n * to handle child objects that are attached to keys known to contain error\n * objects.\n *\n * @param {object} input\n * @param {object} input.input The object to prettify.\n * @param {string} [input.ident] The identation sequence to use. Default: `'    '`.\n * @param {string} [input.eol] The EOL sequence to use. Default: `'\\n'`.\n * @param {string[]} [input.skipKeys] A set of object keys to exclude from the\n * prettified result. Default: `[]`.\n * @param {Object<string, function>} [input.customPrettifiers] Dictionary of\n * custom prettifiers. Default: `{}`.\n * @param {string[]} [input.errorLikeKeys] A set of object keys that contain\n * error objects. Default: `ERROR_LIKE_KEYS` constant.\n * @param {boolean} [input.excludeLoggerKeys] Indicates if known logger specific\n * keys should be excluded from prettification. Default: `true`.\n * @param {boolean} [input.singleLine] Should non-error keys all be formatted\n * on a single line? This does NOT apply to errors, which will still be\n * multi-line. Default: `false`\n *\n * @returns {string} The prettified string. This can be as little as `''` if\n * there was nothing to prettify.\n */\nfunction prettifyObject ({\n  input,\n  ident = '    ',\n  eol = '\\n',\n  skipKeys = [],\n  customPrettifiers = {},\n  errorLikeKeys = ERROR_LIKE_KEYS,\n  excludeLoggerKeys = true,\n  singleLine = false,\n  colorizer = defaultColorizer\n}) {\n  const keysToIgnore = [].concat(skipKeys)\n\n  if (excludeLoggerKeys === true) Array.prototype.push.apply(keysToIgnore, LOGGER_KEYS)\n\n  let result = ''\n\n  // Split object keys into two categories: error and non-error\n  const { plain, errors } = Object.entries(input).reduce(({ plain, errors }, [k, v]) => {\n    if (keysToIgnore.includes(k) === false) {\n      // Pre-apply custom prettifiers, because all 3 cases below will need this\n      const pretty = typeof customPrettifiers[k] === 'function'\n        ? customPrettifiers[k](v, k, input)\n        : v\n      if (errorLikeKeys.includes(k)) {\n        errors[k] = pretty\n      } else {\n        plain[k] = pretty\n      }\n    }\n    return { plain, errors }\n  }, { plain: {}, errors: {} })\n\n  if (singleLine) {\n    // Stringify the entire object as a single JSON line\n    if (Object.keys(plain).length > 0) {\n      result += colorizer.greyMessage(stringifySafe(plain))\n    }\n    result += eol\n  } else {\n    // Put each object entry on its own line\n    Object.entries(plain).forEach(([keyName, keyValue]) => {\n      // custom prettifiers are already applied above, so we can skip it now\n      const lines = typeof customPrettifiers[keyName] === 'function'\n        ? keyValue\n        : stringifySafe(keyValue, null, 2)\n\n      if (lines === undefined) return\n\n      const joinedLines = joinLinesWithIndentation({ input: lines, ident, eol })\n      result += `${ident}${keyName}: ${joinedLines}${eol}`\n    })\n  }\n\n  // Errors\n  Object.entries(errors).forEach(([keyName, keyValue]) => {\n    // custom prettifiers are already applied above, so we can skip it now\n    const lines = typeof customPrettifiers[keyName] === 'function'\n      ? keyValue\n      : stringifySafe(keyValue, null, 2)\n\n    if (lines === undefined) return\n\n    result += prettifyError({ keyName, lines, eol, ident })\n  })\n\n  return result\n}\n\n/**\n * Prettifies a timestamp if the given `log` has either `time`, `timestamp` or custom specified timestamp\n * property.\n *\n * @param {object} input\n * @param {object} input.log The log object with the timestamp to be prettified.\n * @param {string} [input.timestampKey='time'] The log property that should be used to resolve timestamp value\n * @param {boolean|string} [input.translateFormat=undefined] When `true` the\n * timestamp will be prettified into a string at UTC using the default\n * `DATE_FORMAT`. If a string, then `translateFormat` will be used as the format\n * string to determine the output; see the `formatTime` function for details.\n *\n * @returns {undefined|string} If a timestamp property cannot be found then\n * `undefined` is returned. Otherwise, the prettified time is returned as a\n * string.\n */\nfunction prettifyTime ({ log, timestampKey = TIMESTAMP_KEY, translateFormat = undefined }) {\n  let time = null\n\n  if (timestampKey in log) {\n    time = log[timestampKey]\n  } else if ('timestamp' in log) {\n    time = log.timestamp\n  }\n\n  if (time === null) return undefined\n  if (translateFormat) {\n    return '[' + formatTime(time, translateFormat) + ']'\n  }\n\n  return `[${time}]`\n}\n\n/**\n * Prettifies an error string into a multi-line format.\n * @param {object} input\n * @param {string} input.keyName The key assigned to this error in the log object\n * @param {string} input.lines The STRINGIFIED error. If the error field has a\n *  custom prettifier, that should be pre-applied as well\n * @param {string} input.ident The indentation sequence to use\n * @param {string} input.eol The EOL sequence to use\n */\nfunction prettifyError ({ keyName, lines, eol, ident }) {\n  let result = ''\n  const joinedLines = joinLinesWithIndentation({ input: lines, ident, eol })\n  const splitLines = `${ident}${keyName}: ${joinedLines}${eol}`.split(eol)\n\n  for (let j = 0; j < splitLines.length; j += 1) {\n    if (j !== 0) result += eol\n\n    const line = splitLines[j]\n    if (/^\\s*\"stack\"/.test(line)) {\n      const matches = /^(\\s*\"stack\":)\\s*(\".*\"),?$/.exec(line)\n      /* istanbul ignore else */\n      if (matches && matches.length === 3) {\n        const indentSize = /^\\s*/.exec(line)[0].length + 4\n        const indentation = ' '.repeat(indentSize)\n        const stackMessage = matches[2]\n        result += matches[1] + eol + indentation + JSON.parse(stackMessage).replace(/\\n/g, eol + indentation)\n      }\n    } else {\n      result += line\n    }\n  }\n\n  return result\n}\n\n/**\n * Deletes a specified property from a log object if it exists.\n * This function mutates the passed in `log` object.\n *\n * @param {object} log The log object to be modified.\n * @param {string} property A string identifying the property to be deleted from\n * the log object. Accepts nested properties delimited by a `.`\n * e.g. `'prop1.prop2'`.\n */\nfunction deleteLogProperty (log, property) {\n  const props = property.split('.')\n  const propToDelete = props.pop()\n\n  props.forEach((prop) => {\n    if (!Object.prototype.hasOwnProperty.call(log, prop)) {\n      return\n    }\n    log = log[prop]\n  })\n\n  delete log[propToDelete]\n}\n\n/**\n * Filter a log object by removing any ignored keys.\n *\n * @param {object} log The log object to be modified.\n * @param {string} ignoreKeys An array of strings identifying the properties to be removed.\n *\n * @returns {object} A new `log` object instance that does not include the ignored keys.\n */\nfunction filterLog (log, ignoreKeys) {\n  const logCopy = clone(log)\n  ignoreKeys.forEach((ignoreKey) => {\n    deleteLogProperty(logCopy, ignoreKey)\n  })\n  return logCopy\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3Bpbm8tcHJldHR5L2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixjQUFjLG1CQUFPLENBQUMsb0RBQU07QUFDNUIsbUJBQW1CLG1CQUFPLENBQUMseUVBQVk7QUFDdkMsc0JBQXNCLG1CQUFPLENBQUMsa0ZBQXFCO0FBQ25ELHlCQUF5QixtQkFBTyxDQUFDLG9FQUFVO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDBFQUFhOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DLGNBQWM7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EscUNBQXFDLG1DQUFtQztBQUN4RTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxR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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZWZpbGUvLi4vLi4vbm9kZV9tb2R1bGVzL3Bpbm8tcHJldHR5L2xpYi91dGlscy5qcz9hNjMxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBjbG9uZSA9IHJlcXVpcmUoJ3JmZGMnKSgpXG5jb25zdCBkYXRlZm9ybWF0ID0gcmVxdWlyZSgnZGF0ZWZvcm1hdCcpXG5jb25zdCBzdHJpbmdpZnlTYWZlID0gcmVxdWlyZSgnZmFzdC1zYWZlLXN0cmluZ2lmeScpXG5jb25zdCBkZWZhdWx0Q29sb3JpemVyID0gcmVxdWlyZSgnLi9jb2xvcnMnKSgpXG5jb25zdCB7XG4gIERBVEVfRk9STUFULFxuICBFUlJPUl9MSUtFX0tFWVMsXG4gIE1FU1NBR0VfS0VZLFxuICBMRVZFTF9LRVksXG4gIExFVkVMX0xBQkVMLFxuICBUSU1FU1RBTVBfS0VZLFxuICBMT0dHRVJfS0VZUyxcbiAgTEVWRUxTXG59ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPYmplY3QsXG4gIHByZXR0aWZ5RXJyb3JMb2csXG4gIHByZXR0aWZ5TGV2ZWwsXG4gIHByZXR0aWZ5TWVzc2FnZSxcbiAgcHJldHRpZnlNZXRhZGF0YSxcbiAgcHJldHRpZnlPYmplY3QsXG4gIHByZXR0aWZ5VGltZSxcbiAgZmlsdGVyTG9nXG59XG5cbm1vZHVsZS5leHBvcnRzLmludGVybmFscyA9IHtcbiAgZm9ybWF0VGltZSxcbiAgam9pbkxpbmVzV2l0aEluZGVudGF0aW9uLFxuICBwcmV0dGlmeUVycm9yLFxuICBkZWxldGVMb2dQcm9wZXJ0eVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgZ2l2ZW4gYGVwb2NoYCB0byBhIGRlc2lyZWQgZGlzcGxheSBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBlcG9jaCBUaGUgdGltZSB0byBjb252ZXJ0LiBNYXkgYmUgYW55IHZhbHVlIHRoYXQgaXNcbiAqIHZhbGlkIGZvciBgbmV3IERhdGUoKWAuXG4gKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSBbdHJhbnNsYXRlVGltZT1mYWxzZV0gV2hlbiBgZmFsc2VgLCB0aGUgZ2l2ZW4gYGVwb2NoYFxuICogd2lsbCBzaW1wbHkgYmUgcmV0dXJuZWQuIFdoZW4gYHRydWVgLCB0aGUgZ2l2ZW4gYGVwb2NoYCB3aWxsIGJlIGNvbnZlcnRlZFxuICogdG8gYSBzdHJpbmcgYXQgVVRDIHVzaW5nIHRoZSBgREFURV9GT1JNQVRgIGNvbnN0YW50LiBJZiBgdHJhbnNsYXRlVGltZWAgaXNcbiAqIGEgc3RyaW5nLCB0aGUgZm9sbG93aW5nIHJ1bGVzIGFyZSBhdmFpbGFibGU6XG4gKlxuICogLSBgPGZvcm1hdCBzdHJpbmc+YDogVGhlIHN0cmluZyBpcyBhIGxpdGVyYWwgZm9ybWF0IHN0cmluZy4gVGhpcyBmb3JtYXRcbiAqIHN0cmluZyB3aWxsIGJlIHVzZWQgdG8gaW50ZXJwcmV0IHRoZSBgZXBvY2hgIGFuZCByZXR1cm4gYSBkaXNwbGF5IHN0cmluZ1xuICogYXQgVVRDLlxuICogLSBgU1lTOlNUQU5EQVJEYDogVGhlIHJldHVybmVkIGRpc3BsYXkgc3RyaW5nIHdpbGwgZm9sbG93IHRoZSBgREFURV9GT1JNQVRgXG4gKiBjb25zdGFudCBhdCB0aGUgc3lzdGVtJ3MgbG9jYWwgdGltZXpvbmUuXG4gKiAtIGBTWVM6PGZvcm1hdCBzdHJpbmc+YDogVGhlIHJldHVybmVkIGRpc3BsYXkgc3RyaW5nIHdpbGwgZm9sbG93IHRoZSBnaXZlblxuICogYDxmb3JtYXQgc3RyaW5nPmAgYXQgdGhlIHN5c3RlbSdzIGxvY2FsIHRpbWV6b25lLlxuICogLSBgVVRDOjxmb3JtYXQgc3RyaW5nPmA6IFRoZSByZXR1cm5lZCBkaXNwbGF5IHN0cmluZyB3aWxsIGZvbGxvdyB0aGUgZ2l2ZW5cbiAqIGA8Zm9ybWF0IHN0cmluZz5gIGF0IFVUQy5cbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfHN0cmluZ30gVGhlIGZvcm1hdHRlZCB0aW1lLlxuICovXG5mdW5jdGlvbiBmb3JtYXRUaW1lIChlcG9jaCwgdHJhbnNsYXRlVGltZSA9IGZhbHNlKSB7XG4gIGlmICh0cmFuc2xhdGVUaW1lID09PSBmYWxzZSkge1xuICAgIHJldHVybiBlcG9jaFxuICB9XG5cbiAgY29uc3QgaW5zdGFudCA9IG5ldyBEYXRlKGVwb2NoKVxuICBpZiAodHJhbnNsYXRlVGltZSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBkYXRlZm9ybWF0KGluc3RhbnQsICdVVEM6JyArIERBVEVfRk9STUFUKVxuICB9XG5cbiAgY29uc3QgdXBwZXJGb3JtYXQgPSB0cmFuc2xhdGVUaW1lLnRvVXBwZXJDYXNlKClcbiAgaWYgKHVwcGVyRm9ybWF0ID09PSAnU1lTOlNUQU5EQVJEJykge1xuICAgIHJldHVybiBkYXRlZm9ybWF0KGluc3RhbnQsIERBVEVfRk9STUFUKVxuICB9XG5cbiAgY29uc3QgcHJlZml4ID0gdXBwZXJGb3JtYXQuc3Vic3RyKDAsIDQpXG4gIGlmIChwcmVmaXggPT09ICdTWVM6JyB8fCBwcmVmaXggPT09ICdVVEM6Jykge1xuICAgIGlmIChwcmVmaXggPT09ICdVVEM6Jykge1xuICAgICAgcmV0dXJuIGRhdGVmb3JtYXQoaW5zdGFudCwgdHJhbnNsYXRlVGltZSlcbiAgICB9XG4gICAgcmV0dXJuIGRhdGVmb3JtYXQoaW5zdGFudCwgdHJhbnNsYXRlVGltZS5zbGljZSg0KSlcbiAgfVxuXG4gIHJldHVybiBkYXRlZm9ybWF0KGluc3RhbnQsIGBVVEM6JHt0cmFuc2xhdGVUaW1lfWApXG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChpbnB1dCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcgd2l0aCBsaW5lIHNlcGFyYXRvcnMsIGVpdGhlciBgXFxyXFxuYCBvciBgXFxuYCwgYWRkIGluZGVudGF0aW9uXG4gKiB0byBhbGwgbGluZXMgc3Vic2VxdWVudCB0byB0aGUgZmlyc3QgbGluZSBhbmQgcmVqb2luIHRoZSBsaW5lcyB1c2luZyBhblxuICogZW5kIG9mIGxpbmUgc2VxdWVuY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQuaW5wdXQgVGhlIHN0cmluZyB0byBzcGxpdCBhbmQgcmVmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2lucHV0LmlkZW50XSBUaGUgaW5kZW50YXRpb24gc3RyaW5nLiBEZWZhdWx0OiBgICAgIGAgKDQgc3BhY2VzKS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaW5wdXQuZW9sXSBUaGUgZW5kIG9mIGxpbmUgc2VxdWVuY2UgdG8gdXNlIHdoZW4gcmVqb2luaW5nXG4gKiB0aGUgbGluZXMuIERlZmF1bHQ6IGAnXFxuJ2AuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgd2l0aCBsaW5lcyBzdWJzZXF1ZW50IHRvIHRoZSBmaXJzdCBpbmRlbnRlZFxuICogd2l0aCB0aGUgZ2l2ZW4gaW5kZW50YXRpb24gc2VxdWVuY2UuXG4gKi9cbmZ1bmN0aW9uIGpvaW5MaW5lc1dpdGhJbmRlbnRhdGlvbiAoeyBpbnB1dCwgaWRlbnQgPSAnICAgICcsIGVvbCA9ICdcXG4nIH0pIHtcbiAgY29uc3QgbGluZXMgPSBpbnB1dC5zcGxpdCgvXFxyP1xcbi8pXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgbGluZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsaW5lc1tpXSA9IGlkZW50ICsgbGluZXNbaV1cbiAgfVxuICByZXR1cm4gbGluZXMuam9pbihlb2wpXG59XG5cbi8qKlxuICogR2l2ZW4gYSBsb2cgb2JqZWN0IHRoYXQgaGFzIGEgYHR5cGU6ICdFcnJvcidgIGtleSwgcHJldHRpZnkgdGhlIG9iamVjdCBhbmRcbiAqIHJldHVybiB0aGUgcmVzdWx0LiBJbiBvdGhlclxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFxuICogQHBhcmFtIHtvYmplY3R9IGlucHV0LmxvZyBUaGUgZXJyb3IgbG9nIHRvIHByZXR0aWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IFtpbnB1dC5tZXNzYWdlS2V5XSBUaGUgbmFtZSBvZiB0aGUga2V5IHRoYXQgY29udGFpbnMgYVxuICogZ2VuZXJhbCBsb2cgbWVzc2FnZS4gVGhpcyBpcyBub3QgdGhlIGVycm9yJ3MgbWVzc2FnZSBwcm9wZXJ0eSBidXQgdGhlIGxvZ2dlclxuICogbWVzc3NhZ2UgcHJvcGVydHkuIERlZmF1bHQ6IGBNRVNTQUdFX0tFWWAgY29uc3RhbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2lucHV0LmlkZW50XSBUaGUgc2VxdWVuY2UgdG8gdXNlIGZvciBpbmRlbnRhdGlvbi4gRGVmYXVsdDogYCcgICAgJ2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2lucHV0LmVvbF0gVGhlIHNlcXVlbmNlIHRvIHVzZSBmb3IgRU9MLiBEZWZhdWx0OiBgJ1xcbidgLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gW2lucHV0LmVycm9yTGlrZUtleXNdIEEgc2V0IG9mIGtleXMgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZFxuICogdG8gaGF2ZSBlcnJvciBvYmplY3RzIGFzIHZhbHVlcy4gRGVmYXVsdDogYEVSUk9SX0xJS0VfS0VZU2AgY29uc3RhbnQuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbaW5wdXQuZXJyb3JQcm9wZXJ0aWVzXSBBIHNldCBvZiBzcGVjaWZpYyBlcnJvciBvYmplY3RcbiAqIHByb3BlcnRpZXMsIHRoYXQgYXJlIG5vdCB0aGUgdmFsdWUgb2YgYG1lc3NhZ2VLZXlgLCBgdHlwZWAsIG9yIGBzdGFja2AsIHRvXG4gKiBpbmNsdWRlIGluIHRoZSBwcmV0dGlmaWVkIHJlc3VsdC4gVGhlIGZpcnN0IGVudHJ5IGluIHRoZSBsaXN0IG1heSBiZSBgJyonYFxuICogdG8gaW5kaWNhdGUgdGhhdCBhbGwgc2liaWxpbmcgcHJvcGVydGllcyBzaG91bGQgYmUgcHJldHRpZmllZC4gRGVmYXVsdDogYFtdYC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHNyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgcHJldHRpZmllZCBlcnJvciBsb2cuXG4gKi9cbmZ1bmN0aW9uIHByZXR0aWZ5RXJyb3JMb2cgKHtcbiAgbG9nLFxuICBtZXNzYWdlS2V5ID0gTUVTU0FHRV9LRVksXG4gIGlkZW50ID0gJyAgICAnLFxuICBlb2wgPSAnXFxuJyxcbiAgZXJyb3JMaWtlS2V5cyA9IEVSUk9SX0xJS0VfS0VZUyxcbiAgZXJyb3JQcm9wZXJ0aWVzID0gW11cbn0pIHtcbiAgY29uc3Qgc3RhY2sgPSBsb2cuc3RhY2tcbiAgY29uc3Qgam9pbmVkTGluZXMgPSBqb2luTGluZXNXaXRoSW5kZW50YXRpb24oeyBpbnB1dDogc3RhY2ssIGlkZW50LCBlb2wgfSlcbiAgbGV0IHJlc3VsdCA9IGAke2lkZW50fSR7am9pbmVkTGluZXN9JHtlb2x9YFxuXG4gIGlmIChlcnJvclByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGV4Y2x1ZGVQcm9wZXJ0aWVzID0gTE9HR0VSX0tFWVMuY29uY2F0KG1lc3NhZ2VLZXksICd0eXBlJywgJ3N0YWNrJylcbiAgICBsZXQgcHJvcGVydGllc1RvUHJpbnRcbiAgICBpZiAoZXJyb3JQcm9wZXJ0aWVzWzBdID09PSAnKicpIHtcbiAgICAgIC8vIFByaW50IGFsbCBzaWJsaW5nIHByb3BlcnRpZXMgZXhjZXB0IGZvciB0aGUgc3RhbmRhcmQgZXhjbHVzaW9ucy5cbiAgICAgIHByb3BlcnRpZXNUb1ByaW50ID0gT2JqZWN0LmtleXMobG9nKS5maWx0ZXIoayA9PiBleGNsdWRlUHJvcGVydGllcy5pbmNsdWRlcyhrKSA9PT0gZmFsc2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFByaW50IG9ubHkgc2VwY2lmaWVkIHByb3BlcnRpZXMgdW5sZXNzIHRoZSBwcm9wZXJ0eSBpcyBhIHN0YW5kYXJkIGV4Y2x1c2lvbi5cbiAgICAgIHByb3BlcnRpZXNUb1ByaW50ID0gZXJyb3JQcm9wZXJ0aWVzLmZpbHRlcihrID0+IGV4Y2x1ZGVQcm9wZXJ0aWVzLmluY2x1ZGVzKGspID09PSBmYWxzZSlcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BlcnRpZXNUb1ByaW50Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBrZXkgPSBwcm9wZXJ0aWVzVG9QcmludFtpXVxuICAgICAgaWYgKGtleSBpbiBsb2cgPT09IGZhbHNlKSBjb250aW51ZVxuICAgICAgaWYgKGlzT2JqZWN0KGxvZ1trZXldKSkge1xuICAgICAgICAvLyBUaGUgbmVzdGVkIG9iamVjdCBtYXkgaGF2ZSBcImxvZ2dlclwiIHR5cGUga2V5cyBidXQgc2luY2UgdGhleSBhcmUgbm90XG4gICAgICAgIC8vIGF0IHRoZSByb290IGxldmVsIG9mIHRoZSBvYmplY3QgYmVpbmcgcHJvY2Vzc2VkLCB3ZSB3YW50IHRvIHByaW50IHRoZW0uXG4gICAgICAgIC8vIFRodXMsIHdlIGludm9rZSB3aXRoIGBleGNsdWRlTG9nZ2VyS2V5czogZmFsc2VgLlxuICAgICAgICBjb25zdCBwcmV0dGlmaWVkT2JqZWN0ID0gcHJldHRpZnlPYmplY3QoeyBpbnB1dDogbG9nW2tleV0sIGVycm9yTGlrZUtleXMsIGV4Y2x1ZGVMb2dnZXJLZXlzOiBmYWxzZSwgZW9sLCBpZGVudCB9KVxuICAgICAgICByZXN1bHQgPSBgJHtyZXN1bHR9JHtrZXl9OiB7JHtlb2x9JHtwcmV0dGlmaWVkT2JqZWN0fX0ke2VvbH1gXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICByZXN1bHQgPSBgJHtyZXN1bHR9JHtrZXl9OiAke2xvZ1trZXldfSR7ZW9sfWBcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBwYXNzZWQgaW4gbG9nIGhhcyBhIGBsZXZlbGAgdmFsdWUgYW5kIHJldHVybnMgYSBwcmV0dGlmaWVkXG4gKiBzdHJpbmcgZm9yIHRoYXQgbGV2ZWwgaWYgc28uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGlucHV0XG4gKiBAcGFyYW0ge29iamVjdH0gaW5wdXQubG9nIFRoZSBsb2cgb2JqZWN0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2lucHV0LmNvbG9yaXplcl0gQSBjb2xvcml6ZXIgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGEgbGV2ZWxcbiAqIHZhbHVlIGFuZCByZXR1cm5zIGEgY29sb3JpemVkIHN0cmluZy4gRGVmYXVsdDogYSBuby1vcCBjb2xvcml6ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xldmVsS2V5PSdsZXZlbCddIFRoZSBrZXkgdG8gZmluZCB0aGUgbGV2ZWwgdW5kZXIuXG4gKlxuICogQHJldHVybnMge3VuZGVmaW5lZHxzdHJpbmd9IElmIGBsb2dgIGRvZXMgbm90IGhhdmUgYSBgbGV2ZWxgIHByb3BlcnR5IHRoZW5cbiAqIGB1bmRlZmluZWRgIHdpbGwgYmUgcmV0dXJuZWQuIE90aGVyd2lzZSwgYSBzdHJpbmcgZnJvbSB0aGUgc3BlY2lmaWVkXG4gKiBgY29sb3JpemVyYCBpcyByZXR1cm5lZC5cbiAqL1xuZnVuY3Rpb24gcHJldHRpZnlMZXZlbCAoeyBsb2csIGNvbG9yaXplciA9IGRlZmF1bHRDb2xvcml6ZXIsIGxldmVsS2V5ID0gTEVWRUxfS0VZIH0pIHtcbiAgaWYgKGxldmVsS2V5IGluIGxvZyA9PT0gZmFsc2UpIHJldHVybiB1bmRlZmluZWRcbiAgcmV0dXJuIGNvbG9yaXplcihsb2dbbGV2ZWxLZXldKVxufVxuXG4vKipcbiAqIFByZXR0aWZpZXMgYSBtZXNzYWdlIHN0cmluZyBpZiB0aGUgZ2l2ZW4gYGxvZ2AgaGFzIGEgbWVzc2FnZSBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5wdXRcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dC5sb2cgVGhlIGxvZyBvYmplY3Qgd2l0aCB0aGUgbWVzc2FnZSB0byBjb2xvcml6ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaW5wdXQubWVzc2FnZUtleT0nbXNnJ10gVGhlIHByb3BlcnR5IG9mIHRoZSBgbG9nYCB0aGF0IGlzIHRoZVxuICogbWVzc2FnZSB0byBiZSBwcmV0dGlmaWVkLlxuICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IFtpbnB1dC5tZXNzYWdlRm9ybWF0PXVuZGVmaW5lZF0gQSBmb3JtYXQgc3RyaW5nIG9yIGZ1bmN0aW9uIHRoYXQgZGVmaW5lcyBob3cgdGhlXG4gKiAgbG9nZ2VkIG1lc3NhZ2Ugc2hvdWxkIGJlIGZvcm1hdHRlZCwgZS5nLiBgJ3tsZXZlbH0gLSB7cGlkfSdgLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2lucHV0LmNvbG9yaXplcl0gQSBjb2xvcml6ZXIgZnVuY3Rpb24gdGhhdCBoYXMgYVxuICogYC5tZXNzYWdlKHN0cilgIG1ldGhvZCBhdHRhY2hlZCB0byBpdC4gVGhpcyBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgY29sb3JpemVkXG4gKiBzdHJpbmcgd2hpY2ggd2lsbCBiZSB0aGUgXCJwcmV0dGlmaWVkXCIgbWVzc2FnZS4gRGVmYXVsdDogYSBuby1vcCBjb2xvcml6ZXIuXG4gKlxuICogQHJldHVybnMge3VuZGVmaW5lZHxzdHJpbmd9IElmIHRoZSBtZXNzYWdlIGtleSBpcyBub3QgZm91bmQsIG9yIHRoZSBtZXNzYWdlXG4gKiBrZXkgaXMgbm90IGEgc3RyaW5nLCB0aGVuIGB1bmRlZmluZWRgIHdpbGwgYmUgcmV0dXJuZWQuIE90aGVyd2lzZSwgYSBzdHJpbmdcbiAqIHRoYXQgaXMgdGhlIHByZXR0aWZpZWQgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gcHJldHRpZnlNZXNzYWdlICh7IGxvZywgbWVzc2FnZUZvcm1hdCwgbWVzc2FnZUtleSA9IE1FU1NBR0VfS0VZLCBjb2xvcml6ZXIgPSBkZWZhdWx0Q29sb3JpemVyLCBsZXZlbExhYmVsID0gTEVWRUxfTEFCRUwgfSkge1xuICBpZiAobWVzc2FnZUZvcm1hdCAmJiB0eXBlb2YgbWVzc2FnZUZvcm1hdCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gU3RyaW5nKG1lc3NhZ2VGb3JtYXQpLnJlcGxhY2UoL3soW157fV0rKX0vZywgZnVuY3Rpb24gKG1hdGNoLCBwMSkge1xuICAgICAgLy8gcmV0dXJuIGxvZyBsZXZlbCBhcyBzdHJpbmcgaW5zdGVhZCBvZiBpbnRcbiAgICAgIGlmIChwMSA9PT0gbGV2ZWxMYWJlbCAmJiBsb2dbTEVWRUxfS0VZXSkge1xuICAgICAgICByZXR1cm4gTEVWRUxTW2xvZ1tMRVZFTF9LRVldXVxuICAgICAgfVxuICAgICAgLy8gUGFyc2UgbmVzdGVkIGtleSBhY2Nlc3MsIGUuZy4gYHtrZXlBLnN1YktleUJ9YC5cbiAgICAgIHJldHVybiBwMS5zcGxpdCgnLicpLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3Vycikge1xuICAgICAgICBpZiAocHJldiAmJiBwcmV2W2N1cnJdKSB7XG4gICAgICAgICAgcmV0dXJuIHByZXZbY3Vycl1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH0sIGxvZylcbiAgICB9KVxuICAgIHJldHVybiBjb2xvcml6ZXIubWVzc2FnZShtZXNzYWdlKVxuICB9XG4gIGlmIChtZXNzYWdlRm9ybWF0ICYmIHR5cGVvZiBtZXNzYWdlRm9ybWF0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgbXNnID0gbWVzc2FnZUZvcm1hdChsb2csIG1lc3NhZ2VLZXksIGxldmVsTGFiZWwpXG4gICAgcmV0dXJuIGNvbG9yaXplci5tZXNzYWdlKG1zZylcbiAgfVxuICBpZiAobWVzc2FnZUtleSBpbiBsb2cgPT09IGZhbHNlKSByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICh0eXBlb2YgbG9nW21lc3NhZ2VLZXldICE9PSAnc3RyaW5nJykgcmV0dXJuIHVuZGVmaW5lZFxuICByZXR1cm4gY29sb3JpemVyLm1lc3NhZ2UobG9nW21lc3NhZ2VLZXldKVxufVxuXG4vKipcbiAqIFByZXR0aWZpZXMgbWV0YWRhdGEgdGhhdCBpcyB1c3VhbGx5IHByZXNlbnQgaW4gYSBQaW5vIGxvZyBsaW5lLiBJdCBsb29rcyBmb3JcbiAqIGZpZWxkcyBgbmFtZWAsIGBwaWRgLCBgaG9zdG5hbWVgLCBhbmQgYGNhbGxlcmAgYW5kIHJldHVybnMgYSBmb3JtYXR0ZWQgc3RyaW5nIHVzaW5nXG4gKiB0aGUgZmllbGRzIGl0IGZpbmRzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFxuICogQHBhcmFtIHtvYmplY3R9IGlucHV0LmxvZyBUaGUgbG9nIHRoYXQgbWF5IG9yIG1heSBub3QgY29udGFpbiBtZXRhZGF0YSB0b1xuICogYmUgcHJldHRpZmllZC5cbiAqXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfHN0cmluZ30gSWYgbm8gbWV0YWRhdGEgaXMgZm91bmQgdGhlbiBgdW5kZWZpbmVkYCBpc1xuICogcmV0dXJuZWQuIE90aGVyd2lzZSwgYSBzdHJpbmcgb2YgcHJldHRpZmllZCBtZXRhZGF0YSBpcyByZXR1cm5lZC5cbiAqL1xuZnVuY3Rpb24gcHJldHRpZnlNZXRhZGF0YSAoeyBsb2cgfSkge1xuICBsZXQgbGluZSA9ICcnXG5cbiAgaWYgKGxvZy5uYW1lIHx8IGxvZy5waWQgfHwgbG9nLmhvc3RuYW1lKSB7XG4gICAgbGluZSArPSAnKCdcblxuICAgIGlmIChsb2cubmFtZSkge1xuICAgICAgbGluZSArPSBsb2cubmFtZVxuICAgIH1cblxuICAgIGlmIChsb2cubmFtZSAmJiBsb2cucGlkKSB7XG4gICAgICBsaW5lICs9ICcvJyArIGxvZy5waWRcbiAgICB9IGVsc2UgaWYgKGxvZy5waWQpIHtcbiAgICAgIGxpbmUgKz0gbG9nLnBpZFxuICAgIH1cblxuICAgIGlmIChsb2cuaG9zdG5hbWUpIHtcbiAgICAgIC8vIElmIGBwaWRgIGFuZCBgbmFtZWAgd2VyZSBpbiB0aGUgaWdub3JlIGtleXMgbGlzdCB0aGVuIHdlIGRvbid0IG5lZWRcbiAgICAgIC8vIHRoZSBsZWFkaW5nIHNwYWNlLlxuICAgICAgbGluZSArPSBgJHtsaW5lID09PSAnKCcgPyAnb24nIDogJyBvbid9ICR7bG9nLmhvc3RuYW1lfWBcbiAgICB9XG5cbiAgICBsaW5lICs9ICcpJ1xuICB9XG5cbiAgaWYgKGxvZy5jYWxsZXIpIHtcbiAgICBsaW5lICs9IGAke2xpbmUgPT09ICcnID8gJycgOiAnICd9PCR7bG9nLmNhbGxlcn0+YFxuICB9XG5cbiAgaWYgKGxpbmUgPT09ICcnKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaW5lXG4gIH1cbn1cblxuLyoqXG4gKiBQcmV0dGlmaWVzIGEgc3RhbmRhcmQgb2JqZWN0LiBTcGVjaWFsIGNhcmUgaXMgdGFrZW4gd2hlbiBwcm9jZXNzaW5nIHRoZSBvYmplY3RcbiAqIHRvIGhhbmRsZSBjaGlsZCBvYmplY3RzIHRoYXQgYXJlIGF0dGFjaGVkIHRvIGtleXMga25vd24gdG8gY29udGFpbiBlcnJvclxuICogb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5wdXRcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dC5pbnB1dCBUaGUgb2JqZWN0IHRvIHByZXR0aWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IFtpbnB1dC5pZGVudF0gVGhlIGlkZW50YXRpb24gc2VxdWVuY2UgdG8gdXNlLiBEZWZhdWx0OiBgJyAgICAnYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaW5wdXQuZW9sXSBUaGUgRU9MIHNlcXVlbmNlIHRvIHVzZS4gRGVmYXVsdDogYCdcXG4nYC5cbiAqIEBwYXJhbSB7c3RyaW5nW119IFtpbnB1dC5za2lwS2V5c10gQSBzZXQgb2Ygb2JqZWN0IGtleXMgdG8gZXhjbHVkZSBmcm9tIHRoZVxuICogcHJldHRpZmllZCByZXN1bHQuIERlZmF1bHQ6IGBbXWAuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGZ1bmN0aW9uPn0gW2lucHV0LmN1c3RvbVByZXR0aWZpZXJzXSBEaWN0aW9uYXJ5IG9mXG4gKiBjdXN0b20gcHJldHRpZmllcnMuIERlZmF1bHQ6IGB7fWAuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbaW5wdXQuZXJyb3JMaWtlS2V5c10gQSBzZXQgb2Ygb2JqZWN0IGtleXMgdGhhdCBjb250YWluXG4gKiBlcnJvciBvYmplY3RzLiBEZWZhdWx0OiBgRVJST1JfTElLRV9LRVlTYCBjb25zdGFudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lucHV0LmV4Y2x1ZGVMb2dnZXJLZXlzXSBJbmRpY2F0ZXMgaWYga25vd24gbG9nZ2VyIHNwZWNpZmljXG4gKiBrZXlzIHNob3VsZCBiZSBleGNsdWRlZCBmcm9tIHByZXR0aWZpY2F0aW9uLiBEZWZhdWx0OiBgdHJ1ZWAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbnB1dC5zaW5nbGVMaW5lXSBTaG91bGQgbm9uLWVycm9yIGtleXMgYWxsIGJlIGZvcm1hdHRlZFxuICogb24gYSBzaW5nbGUgbGluZT8gVGhpcyBkb2VzIE5PVCBhcHBseSB0byBlcnJvcnMsIHdoaWNoIHdpbGwgc3RpbGwgYmVcbiAqIG11bHRpLWxpbmUuIERlZmF1bHQ6IGBmYWxzZWBcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcHJldHRpZmllZCBzdHJpbmcuIFRoaXMgY2FuIGJlIGFzIGxpdHRsZSBhcyBgJydgIGlmXG4gKiB0aGVyZSB3YXMgbm90aGluZyB0byBwcmV0dGlmeS5cbiAqL1xuZnVuY3Rpb24gcHJldHRpZnlPYmplY3QgKHtcbiAgaW5wdXQsXG4gIGlkZW50ID0gJyAgICAnLFxuICBlb2wgPSAnXFxuJyxcbiAgc2tpcEtleXMgPSBbXSxcbiAgY3VzdG9tUHJldHRpZmllcnMgPSB7fSxcbiAgZXJyb3JMaWtlS2V5cyA9IEVSUk9SX0xJS0VfS0VZUyxcbiAgZXhjbHVkZUxvZ2dlcktleXMgPSB0cnVlLFxuICBzaW5nbGVMaW5lID0gZmFsc2UsXG4gIGNvbG9yaXplciA9IGRlZmF1bHRDb2xvcml6ZXJcbn0pIHtcbiAgY29uc3Qga2V5c1RvSWdub3JlID0gW10uY29uY2F0KHNraXBLZXlzKVxuXG4gIGlmIChleGNsdWRlTG9nZ2VyS2V5cyA9PT0gdHJ1ZSkgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoa2V5c1RvSWdub3JlLCBMT0dHRVJfS0VZUylcblxuICBsZXQgcmVzdWx0ID0gJydcblxuICAvLyBTcGxpdCBvYmplY3Qga2V5cyBpbnRvIHR3byBjYXRlZ29yaWVzOiBlcnJvciBhbmQgbm9uLWVycm9yXG4gIGNvbnN0IHsgcGxhaW4sIGVycm9ycyB9ID0gT2JqZWN0LmVudHJpZXMoaW5wdXQpLnJlZHVjZSgoeyBwbGFpbiwgZXJyb3JzIH0sIFtrLCB2XSkgPT4ge1xuICAgIGlmIChrZXlzVG9JZ25vcmUuaW5jbHVkZXMoaykgPT09IGZhbHNlKSB7XG4gICAgICAvLyBQcmUtYXBwbHkgY3VzdG9tIHByZXR0aWZpZXJzLCBiZWNhdXNlIGFsbCAzIGNhc2VzIGJlbG93IHdpbGwgbmVlZCB0aGlzXG4gICAgICBjb25zdCBwcmV0dHkgPSB0eXBlb2YgY3VzdG9tUHJldHRpZmllcnNba10gPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjdXN0b21QcmV0dGlmaWVyc1trXSh2LCBrLCBpbnB1dClcbiAgICAgICAgOiB2XG4gICAgICBpZiAoZXJyb3JMaWtlS2V5cy5pbmNsdWRlcyhrKSkge1xuICAgICAgICBlcnJvcnNba10gPSBwcmV0dHlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYWluW2tdID0gcHJldHR5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHBsYWluLCBlcnJvcnMgfVxuICB9LCB7IHBsYWluOiB7fSwgZXJyb3JzOiB7fSB9KVxuXG4gIGlmIChzaW5nbGVMaW5lKSB7XG4gICAgLy8gU3RyaW5naWZ5IHRoZSBlbnRpcmUgb2JqZWN0IGFzIGEgc2luZ2xlIEpTT04gbGluZVxuICAgIGlmIChPYmplY3Qua2V5cyhwbGFpbikubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0ICs9IGNvbG9yaXplci5ncmV5TWVzc2FnZShzdHJpbmdpZnlTYWZlKHBsYWluKSlcbiAgICB9XG4gICAgcmVzdWx0ICs9IGVvbFxuICB9IGVsc2Uge1xuICAgIC8vIFB1dCBlYWNoIG9iamVjdCBlbnRyeSBvbiBpdHMgb3duIGxpbmVcbiAgICBPYmplY3QuZW50cmllcyhwbGFpbikuZm9yRWFjaCgoW2tleU5hbWUsIGtleVZhbHVlXSkgPT4ge1xuICAgICAgLy8gY3VzdG9tIHByZXR0aWZpZXJzIGFyZSBhbHJlYWR5IGFwcGxpZWQgYWJvdmUsIHNvIHdlIGNhbiBza2lwIGl0IG5vd1xuICAgICAgY29uc3QgbGluZXMgPSB0eXBlb2YgY3VzdG9tUHJldHRpZmllcnNba2V5TmFtZV0gPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBrZXlWYWx1ZVxuICAgICAgICA6IHN0cmluZ2lmeVNhZmUoa2V5VmFsdWUsIG51bGwsIDIpXG5cbiAgICAgIGlmIChsaW5lcyA9PT0gdW5kZWZpbmVkKSByZXR1cm5cblxuICAgICAgY29uc3Qgam9pbmVkTGluZXMgPSBqb2luTGluZXNXaXRoSW5kZW50YXRpb24oeyBpbnB1dDogbGluZXMsIGlkZW50LCBlb2wgfSlcbiAgICAgIHJlc3VsdCArPSBgJHtpZGVudH0ke2tleU5hbWV9OiAke2pvaW5lZExpbmVzfSR7ZW9sfWBcbiAgICB9KVxuICB9XG5cbiAgLy8gRXJyb3JzXG4gIE9iamVjdC5lbnRyaWVzKGVycm9ycykuZm9yRWFjaCgoW2tleU5hbWUsIGtleVZhbHVlXSkgPT4ge1xuICAgIC8vIGN1c3RvbSBwcmV0dGlmaWVycyBhcmUgYWxyZWFkeSBhcHBsaWVkIGFib3ZlLCBzbyB3ZSBjYW4gc2tpcCBpdCBub3dcbiAgICBjb25zdCBsaW5lcyA9IHR5cGVvZiBjdXN0b21QcmV0dGlmaWVyc1trZXlOYW1lXSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBrZXlWYWx1ZVxuICAgICAgOiBzdHJpbmdpZnlTYWZlKGtleVZhbHVlLCBudWxsLCAyKVxuXG4gICAgaWYgKGxpbmVzID09PSB1bmRlZmluZWQpIHJldHVyblxuXG4gICAgcmVzdWx0ICs9IHByZXR0aWZ5RXJyb3IoeyBrZXlOYW1lLCBsaW5lcywgZW9sLCBpZGVudCB9KVxuICB9KVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBQcmV0dGlmaWVzIGEgdGltZXN0YW1wIGlmIHRoZSBnaXZlbiBgbG9nYCBoYXMgZWl0aGVyIGB0aW1lYCwgYHRpbWVzdGFtcGAgb3IgY3VzdG9tIHNwZWNpZmllZCB0aW1lc3RhbXBcbiAqIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFxuICogQHBhcmFtIHtvYmplY3R9IGlucHV0LmxvZyBUaGUgbG9nIG9iamVjdCB3aXRoIHRoZSB0aW1lc3RhbXAgdG8gYmUgcHJldHRpZmllZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaW5wdXQudGltZXN0YW1wS2V5PSd0aW1lJ10gVGhlIGxvZyBwcm9wZXJ0eSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlc29sdmUgdGltZXN0YW1wIHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSBbaW5wdXQudHJhbnNsYXRlRm9ybWF0PXVuZGVmaW5lZF0gV2hlbiBgdHJ1ZWAgdGhlXG4gKiB0aW1lc3RhbXAgd2lsbCBiZSBwcmV0dGlmaWVkIGludG8gYSBzdHJpbmcgYXQgVVRDIHVzaW5nIHRoZSBkZWZhdWx0XG4gKiBgREFURV9GT1JNQVRgLiBJZiBhIHN0cmluZywgdGhlbiBgdHJhbnNsYXRlRm9ybWF0YCB3aWxsIGJlIHVzZWQgYXMgdGhlIGZvcm1hdFxuICogc3RyaW5nIHRvIGRldGVybWluZSB0aGUgb3V0cHV0OyBzZWUgdGhlIGBmb3JtYXRUaW1lYCBmdW5jdGlvbiBmb3IgZGV0YWlscy5cbiAqXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfHN0cmluZ30gSWYgYSB0aW1lc3RhbXAgcHJvcGVydHkgY2Fubm90IGJlIGZvdW5kIHRoZW5cbiAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLiBPdGhlcndpc2UsIHRoZSBwcmV0dGlmaWVkIHRpbWUgaXMgcmV0dXJuZWQgYXMgYVxuICogc3RyaW5nLlxuICovXG5mdW5jdGlvbiBwcmV0dGlmeVRpbWUgKHsgbG9nLCB0aW1lc3RhbXBLZXkgPSBUSU1FU1RBTVBfS0VZLCB0cmFuc2xhdGVGb3JtYXQgPSB1bmRlZmluZWQgfSkge1xuICBsZXQgdGltZSA9IG51bGxcblxuICBpZiAodGltZXN0YW1wS2V5IGluIGxvZykge1xuICAgIHRpbWUgPSBsb2dbdGltZXN0YW1wS2V5XVxuICB9IGVsc2UgaWYgKCd0aW1lc3RhbXAnIGluIGxvZykge1xuICAgIHRpbWUgPSBsb2cudGltZXN0YW1wXG4gIH1cblxuICBpZiAodGltZSA9PT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAodHJhbnNsYXRlRm9ybWF0KSB7XG4gICAgcmV0dXJuICdbJyArIGZvcm1hdFRpbWUodGltZSwgdHJhbnNsYXRlRm9ybWF0KSArICddJ1xuICB9XG5cbiAgcmV0dXJuIGBbJHt0aW1lfV1gXG59XG5cbi8qKlxuICogUHJldHRpZmllcyBhbiBlcnJvciBzdHJpbmcgaW50byBhIG11bHRpLWxpbmUgZm9ybWF0LlxuICogQHBhcmFtIHtvYmplY3R9IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQua2V5TmFtZSBUaGUga2V5IGFzc2lnbmVkIHRvIHRoaXMgZXJyb3IgaW4gdGhlIGxvZyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dC5saW5lcyBUaGUgU1RSSU5HSUZJRUQgZXJyb3IuIElmIHRoZSBlcnJvciBmaWVsZCBoYXMgYVxuICogIGN1c3RvbSBwcmV0dGlmaWVyLCB0aGF0IHNob3VsZCBiZSBwcmUtYXBwbGllZCBhcyB3ZWxsXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQuaWRlbnQgVGhlIGluZGVudGF0aW9uIHNlcXVlbmNlIHRvIHVzZVxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0LmVvbCBUaGUgRU9MIHNlcXVlbmNlIHRvIHVzZVxuICovXG5mdW5jdGlvbiBwcmV0dGlmeUVycm9yICh7IGtleU5hbWUsIGxpbmVzLCBlb2wsIGlkZW50IH0pIHtcbiAgbGV0IHJlc3VsdCA9ICcnXG4gIGNvbnN0IGpvaW5lZExpbmVzID0gam9pbkxpbmVzV2l0aEluZGVudGF0aW9uKHsgaW5wdXQ6IGxpbmVzLCBpZGVudCwgZW9sIH0pXG4gIGNvbnN0IHNwbGl0TGluZXMgPSBgJHtpZGVudH0ke2tleU5hbWV9OiAke2pvaW5lZExpbmVzfSR7ZW9sfWAuc3BsaXQoZW9sKVxuXG4gIGZvciAobGV0IGogPSAwOyBqIDwgc3BsaXRMaW5lcy5sZW5ndGg7IGogKz0gMSkge1xuICAgIGlmIChqICE9PSAwKSByZXN1bHQgKz0gZW9sXG5cbiAgICBjb25zdCBsaW5lID0gc3BsaXRMaW5lc1tqXVxuICAgIGlmICgvXlxccypcInN0YWNrXCIvLnRlc3QobGluZSkpIHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSAvXihcXHMqXCJzdGFja1wiOilcXHMqKFwiLipcIiksPyQvLmV4ZWMobGluZSlcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICBjb25zdCBpbmRlbnRTaXplID0gL15cXHMqLy5leGVjKGxpbmUpWzBdLmxlbmd0aCArIDRcbiAgICAgICAgY29uc3QgaW5kZW50YXRpb24gPSAnICcucmVwZWF0KGluZGVudFNpemUpXG4gICAgICAgIGNvbnN0IHN0YWNrTWVzc2FnZSA9IG1hdGNoZXNbMl1cbiAgICAgICAgcmVzdWx0ICs9IG1hdGNoZXNbMV0gKyBlb2wgKyBpbmRlbnRhdGlvbiArIEpTT04ucGFyc2Uoc3RhY2tNZXNzYWdlKS5yZXBsYWNlKC9cXG4vZywgZW9sICsgaW5kZW50YXRpb24pXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCArPSBsaW5lXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIERlbGV0ZXMgYSBzcGVjaWZpZWQgcHJvcGVydHkgZnJvbSBhIGxvZyBvYmplY3QgaWYgaXQgZXhpc3RzLlxuICogVGhpcyBmdW5jdGlvbiBtdXRhdGVzIHRoZSBwYXNzZWQgaW4gYGxvZ2Agb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBsb2cgVGhlIGxvZyBvYmplY3QgdG8gYmUgbW9kaWZpZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgQSBzdHJpbmcgaWRlbnRpZnlpbmcgdGhlIHByb3BlcnR5IHRvIGJlIGRlbGV0ZWQgZnJvbVxuICogdGhlIGxvZyBvYmplY3QuIEFjY2VwdHMgbmVzdGVkIHByb3BlcnRpZXMgZGVsaW1pdGVkIGJ5IGEgYC5gXG4gKiBlLmcuIGAncHJvcDEucHJvcDInYC5cbiAqL1xuZnVuY3Rpb24gZGVsZXRlTG9nUHJvcGVydHkgKGxvZywgcHJvcGVydHkpIHtcbiAgY29uc3QgcHJvcHMgPSBwcm9wZXJ0eS5zcGxpdCgnLicpXG4gIGNvbnN0IHByb3BUb0RlbGV0ZSA9IHByb3BzLnBvcCgpXG5cbiAgcHJvcHMuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZywgcHJvcCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsb2cgPSBsb2dbcHJvcF1cbiAgfSlcblxuICBkZWxldGUgbG9nW3Byb3BUb0RlbGV0ZV1cbn1cblxuLyoqXG4gKiBGaWx0ZXIgYSBsb2cgb2JqZWN0IGJ5IHJlbW92aW5nIGFueSBpZ25vcmVkIGtleXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGxvZyBUaGUgbG9nIG9iamVjdCB0byBiZSBtb2RpZmllZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZ25vcmVLZXlzIEFuIGFycmF5IG9mIHN0cmluZ3MgaWRlbnRpZnlpbmcgdGhlIHByb3BlcnRpZXMgdG8gYmUgcmVtb3ZlZC5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBBIG5ldyBgbG9nYCBvYmplY3QgaW5zdGFuY2UgdGhhdCBkb2VzIG5vdCBpbmNsdWRlIHRoZSBpZ25vcmVkIGtleXMuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlckxvZyAobG9nLCBpZ25vcmVLZXlzKSB7XG4gIGNvbnN0IGxvZ0NvcHkgPSBjbG9uZShsb2cpXG4gIGlnbm9yZUtleXMuZm9yRWFjaCgoaWdub3JlS2V5KSA9PiB7XG4gICAgZGVsZXRlTG9nUHJvcGVydHkobG9nQ29weSwgaWdub3JlS2V5KVxuICB9KVxuICByZXR1cm4gbG9nQ29weVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pino-pretty/lib/utils.js\n");

/***/ })

};
;